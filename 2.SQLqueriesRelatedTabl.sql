
======================================================
/*2.1 Связи между таблицами*/
======================================================

/*Создать таблицу author следующей структуры:*/
CREATE TABLE author(
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name_author VARCHAR(50)
);
# Affected rows: 0

/*Заполнить таблицу author. В нее включить следующих авторов:*/
INSERT INTO author (name_author)
VALUES 
    ('Булгаков М.А.'),
    ('Достоевский Ф.М.'),
    ('Есенин С.А.'),
    ('Пастернак Б.Л.');
    
SELECT * FROM author;
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
| 4         | Пастернак Б.Л.   |
+-----------+------------------+

/*Перепишите запрос на создание таблицы book , чтобы ее структура соответствовала структуре, показанной на логической
 схеме (таблица genre уже создана, порядок следования столбцов - как на логической схеме в таблице book, genre_id  - 
 внешний ключ) . Для genre_id ограничение о недопустимости пустых значений не задавать. В качестве главной таблицы для
  описания поля  genre_idиспользовать таблицу genre следующей структуры:*/
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL,
    genre_id INT,
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id),
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id)
);
# Affected rows: 0

/*Создать таблицу book той же структуры, что и на предыдущем шаге. Будем считать, что при удалении автора из таблицы 
author, должны удаляться все записи о книгах из таблицы book, написанные этим автором. А при удалении жанра из таблицы
 genre для соответствующей записи book установить значение Null в столбце genre_id. */
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL,
        genre_id INT,
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
);
# Affected rows: 0

/*Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book, первые 5 записей уже добавлены:*/
INSERT INTO book (title, author_id, genre_id, price, amount)
VALUES 
    ('Стихотворения и поэмы', 3, 2, 650.00, 15),
    ('Черный человек', 3, 2, 570.20, 6),
    ('Лирика', 4, 2, 518.99, 2);
    
SELECT * FROM book;
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+

=======================================================
/*2.2 Запросы на выборку, соединение таблиц*/
=======================================================

/*Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.*/
SELECT title, name_genre, price
FROM 
    genre INNER JOIN book
    ON genre.genre_id = book.genre_id
WHERE amount > 8
ORDER BY price DESC;
+-----------------------+------------+--------+
| title                 | name_genre | price  |
+-----------------------+------------+--------+
| Стихотворения и поэмы | Поэзия     | 650.00 |
| Игрок                 | Роман      | 480.50 |
| Идиот                 | Роман      | 460.00 |
+-----------------------+------------+--------+

/*Вывести все жанры, которые не представлены в книгах на складе.*/
SELECT name_genre 
FROM genre LEFT JOIN book
     ON genre.genre_id = book.genre_id
WHERE amount IS Null;
+-------------+
| name_genre  |
+-------------+
| Приключения |
+-------------+

/*Есть список городов, хранящийся в таблице city:

city_id	name_city
1	Москва
2	Санкт-Петербург
3	Владивосток
Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать
 случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать
  Дата. Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат 
  проведения выставок.*/
SELECT name_city, name_author, (DATE_ADD('2020-01-01', INTERVAL (FLOOR(RAND() * 365)) DAY)) AS Дата
FROM 
    author, city
ORDER BY name_city, Дата DESC;
+-----------------+------------------+------------+
| name_city       | name_author      | Дата       |
+-----------------+------------------+------------+
| Владивосток     | Пастернак Б.Л.   | 2020-11-13 |
| Владивосток     | Булгаков М.А.    | 2020-10-30 |
| Владивосток     | Лермонтов М.Ю.   | 2020-09-22 |
| Владивосток     | Есенин С.А.      | 2020-05-11 |
| Владивосток     | Достоевский Ф.М. | 2020-05-02 |
| Москва          | Есенин С.А.      | 2020-12-07 |
| Москва          | Булгаков М.А.    | 2020-08-06 |
| Москва          | Достоевский Ф.М. | 2020-05-26 |
| Москва          | Пастернак Б.Л.   | 2020-01-25 |
| Москва          | Лермонтов М.Ю.   | 2020-01-03 |
| Санкт-Петербург | Достоевский Ф.М. | 2020-11-17 |
| Санкт-Петербург | Есенин С.А.      | 2020-08-08 |
| Санкт-Петербург | Пастернак Б.Л.   | 2020-07-14 |
| Санкт-Петербург | Лермонтов М.Ю.   | 2020-06-08 |
| Санкт-Петербург | Булгаков М.А.    | 2020-03-20 |
+-----------------+------------------+------------+

/* Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном 
по названиям книг виде.*/
SELECT name_genre, title, name_author
FROM
    author 
    INNER JOIN  book ON author.author_id = book.author_id
    INNER JOIN genre ON genre.genre_id = book.genre_id
WHERE name_genre = 'Роман'
ORDER BY title;
+------------+--------------------+------------------+
| name_genre | title              | name_author      |
+------------+--------------------+------------------+
| Роман      | Белая гвардия      | Булгаков М.А.    |
| Роман      | Братья Карамазовы  | Достоевский Ф.М. |
| Роман      | Игрок              | Достоевский Ф.М. |
| Роман      | Идиот              | Достоевский Ф.М. |
| Роман      | Мастер и Маргарита | Булгаков М.А.    |
+------------+--------------------+------------------+

/*Посчитать количество экземпляров  книг каждого автора из таблицы author.  Вывести тех авторов,  количество книг
 которых меньше 10, в отсортированном по возрастанию количества виде. Последний столбец назвать Количество.*/
SELECT name_author, IF(SUM(amount) IS NULL, NULL, SUM(amount)) AS Количество
FROM author LEFT JOIN book on author.author_id = book.author_id

GROUP BY name_author
HAVING  Количество < 10 or COUNT(title) = 0
ORDER BY Количество; 
+----------------+------------+
| name_author    | Количество |
+----------------+------------+
| Лермонтов М.Ю. | NULL       |
| Пастернак Б.Л. | 2          |
| Булгаков М.А.  | 8          |
+----------------+------------+

/*Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре.*/
SELECT name_author
FROM
    author 
    INNER JOIN  book ON author.author_id = book.author_id
    INNER JOIN genre ON genre.genre_id = book.genre_id

GROUP BY name_author
HAVING COUNT( DISTINCT(name_genre))=1;
+------------------+
| name_author      |
+------------------+
| Достоевский Ф.М. |
| Пастернак Б.Л.   |
+------------------+

/*Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество
 экземпляров книги), написанных в самых популярных жанрах, в отсортированном в алфавитном порядке по названию книг 
 виде. Самым популярным считать жанр, общее количество экземпляров книг которого на складе максимально.*/
SELECT  title, name_author, name_genre, price, amount
FROM 
    author 
    INNER JOIN book ON author.author_id = book.author_id
    INNER JOIN genre ON  book.genre_id = genre.genre_id

WHERE genre.genre_id IN
         (/* выбираем автора, если он пишет книги в самых популярных жанрах*/
          SELECT query_in_1.genre_id
          FROM 
              ( /* выбираем код жанра и количество произведений, относящихся к нему */
                SELECT genre_id, SUM(amount) AS sum_amount
                FROM book
                GROUP BY genre_id
               )query_in_1
          INNER JOIN 
              ( /* выбираем запись, в которой указан код жанр с максимальным количеством книг */
                SELECT genre_id, SUM(amount) AS sum_amount
                FROM book
                GROUP BY genre_id
                ORDER BY sum_amount DESC
                LIMIT 1
               ) query_in_2
          ON query_in_1.sum_amount= query_in_2.sum_amount
         )  
ORDER BY title; 
+-----------------------+------------------+------------+--------+--------+
| title                 | name_author      | name_genre | price  | amount |
+-----------------------+------------------+------------+--------+--------+
| Белая гвардия         | Булгаков М.А.    | Роман      | 540.50 | 5      |
| Братья Карамазовы     | Достоевский Ф.М. | Роман      | 799.01 | 3      |
| Игрок                 | Достоевский Ф.М. | Роман      | 480.50 | 10     |
| Идиот                 | Достоевский Ф.М. | Роман      | 460.00 | 10     |
| Лирика                | Пастернак Б.Л.   | Поэзия     | 518.99 | 10     |
| Мастер и Маргарита    | Булгаков М.А.    | Роман      | 670.99 | 3      |
| Стихотворения и поэмы | Есенин С.А.      | Поэзия     | 650.00 | 15     |
| Черный человек        | Есенин С.А.      | Поэзия     | 570.20 | 6      |
+-----------------------+------------------+------------+--------+--------+

/*Если в таблицах supply  и book есть одинаковые книги, которые имеют равную цену,  вывести их название и автора,
 а также посчитать общее количество экземпляров книг в таблицах supply и book,  столбцы назвать Название, Автор  
 и Количество.*/
SELECT book.title AS Название, author.name_author AS Автор, (book.amount + supply.amount) AS Количество
FROM 
    author 
    INNER JOIN book USING (author_id)   
    INNER JOIN supply ON book.title = supply.title 
                         and author.name_author = supply.author
WHERE book.price = supply.price;
+----------------+-------------+------------+
| Название       | Автор       | Количество |
+----------------+-------------+------------+
| Черный человек | Есенин С.А. | 12         |
+----------------+-------------+------------+

/*Придумайте один или несколько запросов для таблиц book,  author, genre. Моя задача.
Вывести информацию о книгах (название книги, фамилию и инициалы автора, название жанра, цену и количество экземпляров
 книги), написанных в самым популярным писателем, в отсортированном в алфавитном порядке по названию книг виде. Самым 
 популярным считать автора, общее количество экземпляров книг которого на складе максимально.*/
SELECT  title, name_author, name_genre, price, amount
FROM 
    author 
    INNER JOIN book ON author.author_id = book.author_id
    INNER JOIN genre ON  book.genre_id = genre.genre_id

WHERE author.author_id IN
         (/* выбираем автора, если он пишет книги в самых популярных жанрах*/
          SELECT query_in_1.author_id
          FROM 
              ( /* выбираем код жанра и количество произведений, относящихся к нему */
                SELECT author_id, SUM(amount) AS sum_amount
                FROM book
                GROUP BY author_id
               )query_in_1
          INNER JOIN 
              ( /* выбираем запись, в которой указан код жанр с максимальным количеством книг */
                SELECT author_id, SUM(amount) AS sum_amount
                FROM book
                GROUP BY author_id
                ORDER BY sum_amount DESC
                LIMIT 1
               ) query_in_2
          ON query_in_1.sum_amount= query_in_2.sum_amount
         )  
ORDER BY title; 
+-------------------+------------------+------------+--------+--------+
| title             | name_author      | name_genre | price  | amount |
+-------------------+------------------+------------+--------+--------+
| Братья Карамазовы | Достоевский Ф.М. | Роман      | 799.01 | 3      |
| Игрок             | Достоевский Ф.М. | Роман      | 480.50 | 10     |
| Идиот             | Достоевский Ф.М. | Роман      | 460.00 | 10     |
+-------------------+------------------+------------+--------+--------+

===============================================================
/*2.3 Запросы корректировки, соединение таблиц*/
===============================================================

/*Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  необходимо в
 таблице book увеличить количество на значение, указанное в поставке и пересчитать цену. А в таблице  supply обнулить
  количество этих книг. Формула для пересчета цены:*/
UPDATE book 
     INNER JOIN author ON author.author_id = book.author_id
     INNER JOIN supply ON book.title = supply.title 
                         and supply.author = author.name_author
SET book.amount = book.amount + supply.amount, book.price = (book.price * book.amount + supply.price * supply.amount) / (book.amount + supply.amount), supply.amount = 0   
WHERE supply.author = 'Достоевский Ф.М.';

SELECT * FROM book;
SELECT * FROM supply;
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 8

Query result:
+-----------+-----------------------+------------------+--------+--------+
| supply_id | title                 | author           | price  | amount |
+-----------+-----------------------+------------------+--------+--------+
| 1         | Доктор Живаго         | Пастернак Б.Л.   | 380.80 | 4      |
| 2         | Черный человек        | Есенин С.А.      | 570.20 | 6      |
| 3         | Белая гвардия         | Булгаков М.А.    | 540.50 | 7      |
| 4         | Идиот                 | Достоевский Ф.М. | 360.80 | 0      |
| 5         | Стихотворения и поэмы | Лермонтов М.Ю.   | 255.90 | 4      |
| 6         | Остров сокровищ       | Стивенсон Р.Л.   | 599.99 | 5      |
+-----------+-----------------------+------------------+--------+--------+

/*Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы
 author.  Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.*/
INSERT INTO author (name_author)
SELECT supply.author
FROM 
    author 
    RIGHT JOIN supply on author.name_author = supply.author
WHERE name_author IS Null;

SELECT * FROM author;
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
| 4         | Пастернак Б.Л.   |
| 5         | Лермонтов М.Ю.   |
| 6         | Стивенсон Р.Л.   |
+-----------+------------------+

/*Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. Затем вывести для 
просмотра таблицу book.*/
INSERT INTO book (title, author_id, price, amount)
SELECT title, author_id, price, amount
FROM 
    author 
    INNER JOIN supply ON author.name_author = supply.author
WHERE amount <> 0;

SELECT * FROM book;
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | NULL     | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | NULL     | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+

/*Занести для книги «Стихотворения и поэмы» Лермонтова жанр «Поэзия», а для книги «Остров сокровищ» Стивенсона -
 «Приключения». (Использовать два запроса).*/
UPDATE book
SET genre_id = 
      (
       SELECT genre_id 
       FROM genre 
       WHERE name_genre = 'Поэзия'
      )
WHERE book_id = 10;

UPDATE book
SET genre_id = 
      (
       SELECT genre_id 
       FROM genre 
       WHERE name_genre = 'Приключения'
      )
WHERE book_id = 11;

SELECT * FROM book;
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+

/*Удалить всех авторов и все их книги, общее количество книг которых меньше 20.*/
DELETE FROM author
WHERE author_id IN (
    SELECT author_id
    FROM book
    GROUP BY author_id
    HAVING SUM(amount) < 20);

SELECT * FROM author;
SELECT * FROM book;
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
+-----------+------------------+
Affected rows: 2

Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
+---------+-----------------------+-----------+----------+--------+--------+

/*Удалить все жанры, к которым относится меньше 4-х книг. В таблице book для этих жанров установить значение Null.*/
DELETE FROM genre
WHERE genre_id IN (
    SELECT genre_id
    FROM book
    GROUP BY genre_id
    HAVING COUNT(title) < 4
);

SELECT * FROM genre;
SELECT * FROM book;
+----------+------------+
| genre_id | name_genre |
+----------+------------+
| 1        | Роман      |
| 2        | Поэзия     |
+----------+------------+
Affected rows: 2

Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | NULL     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+

/*Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. В запросе
 для отбора авторов использовать полное название жанра, а не его id.*/
DELETE FROM author
USING 
    author 
    INNER JOIN book ON author.author_id = book.author_id
    INNER JOIN genre ON  book.genre_id = genre.genre_id
WHERE genre.name_genre = 'Поэзия';

SELECT * FROM author;
SELECT * FROM book;
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 6         | Стивенсон Р.Л.   |
+-----------+------------------+
Affected rows: 3

Query result:
+---------+--------------------+-----------+----------+--------+--------+
| book_id | title              | author_id | genre_id | price  | amount |
+---------+--------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия      | 1         | 1        | 540.50 | 12     |
| 3       | Идиот              | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы  | 2         | 1        | 799.01 | 3      |
| 5       | Игрок              | 2         | 1        | 480.50 | 10     |
| 11      | Остров сокровищ    | 6         | 3        | 599.99 | 5      |
+---------+--------------------+-----------+----------+--------+--------+

/*Придумайте один или несколько запросов корректировки данных.
Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  необходимо 
в таблице book увеличить количество на значение, указанное в поставке и пересчитать цену. А в таблице  supply 
обнулить количество этих книг.*/
UPDATE book 
     INNER JOIN author ON author.author_id = book.author_id
     INNER JOIN supply ON book.title = supply.title 
                         and supply.author = author.name_author
SET book.amount = book.amount + supply.amount, book.price = (book.price * book.amount + supply.price * supply.amount) / (book.amount + supply.amount), supply.amount = 0   
WHERE supply.amount <= 3;

SELECT * FROM book;
SELECT * FROM supply;
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 8

Query result:
+-----------+-----------------------+------------------+--------+--------+
| supply_id | title                 | author           | price  | amount |
+-----------+-----------------------+------------------+--------+--------+
| 1         | Доктор Живаго         | Пастернак Б.Л.   | 380.80 | 4      |
| 2         | Черный человек        | Есенин С.А.      | 570.20 | 6      |
| 3         | Белая гвардия         | Булгаков М.А.    | 540.50 | 7      |
| 4         | Идиот                 | Достоевский Ф.М. | 360.80 | 0      |
| 5         | Стихотворения и поэмы | Лермонтов М.Ю.   | 255.90 | 4      |
| 6         | Остров сокровищ       | Стивенсон Р.Л.   | 599.99 | 5      |
+-----------+-----------------------+------------------+--------+--------+

===============================================================
/*2.4 База данных «Интернет-магазин книг», запросы на выборку*/
===============================================================

/*Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в 
отсортированном по номеру заказа и названиям книг виде.*/
SELECT buy.buy_id, book.title, book.price, buy_book.amount
FROM 
    client 
    INNER JOIN buy ON client.client_id = buy.client_id
    INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
    INNER JOIN book ON buy_book.book_id=book.book_id
WHERE name_client ='Баранов Павел'
ORDER BY buy_id, title; 
+--------+--------------------+--------+--------+
| buy_id | title              | price  | amount |
+--------+--------------------+--------+--------+
| 1      | Идиот              | 460.00 | 1      |
| 1      | Мастер и Маргарита | 670.99 | 1      |
| 1      | Черный человек     | 570.20 | 2      |
| 4      | Игрок              | 480.50 | 1      |
+--------+--------------------+--------+--------+

/*Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком 
количестве заказов фигурирует каждая книга).  Вывести фамилию и инициалы автора, название книги, последний 
столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг.*/
SELECT name_author, title, COUNT(buy_book.amount) AS Количество
FROM author
    INNER JOIN book USING(author_id)
    LEFT JOIN buy_book USING(book_id)
GROUP BY name_author, title
ORDER BY name_author, title;
+------------------+-----------------------+------------+
| name_author      | title                 | Количество |
+------------------+-----------------------+------------+
| Булгаков М.А.    | Белая гвардия         | 1          |
| Булгаков М.А.    | Мастер и Маргарита    | 2          |
| Достоевский Ф.М. | Братья Карамазовы     | 0          |
| Достоевский Ф.М. | Игрок                 | 1          |
| Достоевский Ф.М. | Идиот                 | 2          |
| Есенин С.А.      | Стихотворения и поэмы | 0          |
| Есенин С.А.      | Черный человек        | 1          |
| Пастернак Б.Л.   | Лирика                | 1          |
+------------------+-----------------------+------------+

/*Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в 
каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в 
алфавитном порядке по названию городов.*/
SELECT name_city, COUNT(buy.client_id) AS Количество
FROM client
    INNER JOIN buy USING(client_id)
    INNER JOIN city USING(city_id)
GROUP BY buy.client_id, name_city
ORDER BY buy.client_id, name_city;
+-----------------+------------+
| name_city       | Количество |
+-----------------+------------+
| Владивосток     | 2          |
| Москва          | 1          |
| Санкт-Петербург | 1          |
+-----------------+------------+

/*Вывести номера всех оплаченных заказов и даты, когда они были оплачены.*/
SELECT buy_step.buy_id, buy_step.date_step_end
FROM buy_step
WHERE buy_step.step_id = 1 AND buy_step.date_step_end IS NOT Null;
+--------+---------------+
| buy_id | date_step_end |
+--------+---------------+
| 1      | 2020-02-20    |
| 2      | 2020-02-28    |
| 3      | 2020-03-05    |
+--------+---------------+

/*Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма
 произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец 
 назвать Стоимость.*/
SELECT buy.buy_id, client.name_client, SUM(buy_book.amount * book.price) AS Стоимость
FROM buy_book
    INNER JOIN book USING(book_id)
    INNER JOIN buy USING(buy_id)
    INNER JOIN client USING(client_id)
GROUP BY client.name_client, buy.buy_id
ORDER BY buy_id;
+--------+----------------+-----------+
| buy_id | name_client    | Стоимость |
+--------+----------------+-----------+
| 1      | Баранов Павел  | 2271.39   |
| 2      | Семенонов Иван | 1037.98   |
| 3      | Абрамова Катя  | 2131.49   |
| 4      | Баранов Павел  | 480.50    |
+--------+----------------+-----------+

/*Вывести номера заказов (buy_id) и названия этапов,  на которых они в данный момент находятся. Если заказ доставлен
 –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.*/
SELECT buy_step.buy_id, step.name_step
FROM buy_step 
    INNER JOIN step USING(step_id)
WHERE buy_step.date_step_beg IS NOT Null AND buy_step.date_step_end IS Null
ORDER BY buy_id;
+--------+-----------------+
| buy_id | name_step       |
+--------+-----------------+
| 2      | Транспортировка |
| 3      | Доставка        |
| 4      | Оплата          |
+--------+-----------------+

/*В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город
 (рассматривается только этап Транспортировка). Для тех заказов, которые прошли этап транспортировки, вывести 
 количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать
  количество дней задержки, в противном случае вывести 0. В результат включить номер заказа (buy_id), а также 
  вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.*/
SELECT buy.buy_id,
DATEDIFF(date_step_end, date_step_beg) AS Количество_дней,
IF(DATEDIFF(date_step_end, date_step_beg) > city.days_delivery, abs(city.days_delivery - DATEDIFF(date_step_end, date_step_beg)), 0) AS Опоздание
FROM city
    INNER JOIN client USING(city_id)
    INNER JOIN buy USING(client_id)
    INNER JOIN buy_step USING(buy_id)
WHERE buy_step.step_id=3 AND date_step_end IS NOT Null
GROUP BY buy_id, Количество_дней, Опоздание
ORDER BY buy_id;
+--------+-----------------+-----------+
| buy_id | Количество_дней | Опоздание |
+--------+-----------------+-----------+
| 1      | 14              | 2         |
| 3      | 4               | 0         |
+--------+-----------------+-----------+

/*Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту
 виде. В решении используйте фамилию автора, а не его id.*/
SELECT name_client
FROM author
    INNER JOIN book USING(author_id)
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id)
    INNER JOIN client USING(client_id)
WHERE author.name_author = 'Достоевский Ф.М.'
GROUP BY name_client
ORDER BY name_client;
+---------------+
| name_client   |
+---------------+
| Абрамова Катя |
| Баранов Павел |
+---------------+

/*Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество. Последний
 столбец назвать Количество.*/
SELECT genre.name_genre, SUM(buy_book.amount) as Количество
FROM genre
    INNER JOIN book USING(genre_id)
    INNER JOIN buy_book USING(book_id)
GROUP BY genre.name_genre
HAVING SUM(buy_book.amount) =
    (/* вычисляем максимальный жанр из общего количества каждого заказа */
        SELECT MAX(sum_amount) AS max_sum_amount
        FROM 
            (/* считаем количество жанров каждого заказа */
            SELECT genre.genre_id, SUM(buy_book.amount) AS sum_amount 
            FROM genre
            INNER JOIN book USING(genre_id)
            INNER JOIN buy_book USING(book_id)
            GROUP BY genre.genre_id
            ) query_in
    );
  +------------+------------+
| name_genre | Количество |
+------------+------------+
| Роман      | 7          |
+------------+------------+
  
/*Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц,
 сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов:
  Год, Месяц, Сумма*/
SELECT YEAR(date_payment) AS Год, MONTHNAME(date_payment) AS Месяц, SUM(buy_archive.price * buy_archive.amount) AS Сумма
FROM 
    buy_archive
GROUP BY Месяц, Год
UNION ALL
SELECT YEAR(buy_step.date_step_end) AS Год, MONTHNAME(buy_step.date_step_end) AS Месяц, SUM(book.price * buy_book.amount) AS Сумма
FROM 
    book 
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id) 
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)
WHERE  date_step_end IS NOT Null and name_step = "Оплата"
GROUP BY Месяц, Год
ORDER BY Месяц, Год
+------+----------+---------+
| Год  | Месяц    | Сумма   |
+------+----------+---------+
| 2019 | February | 5626.30 |
| 2020 | February | 3309.37 |
| 2019 | March    | 6857.50 |
| 2020 | March    | 2131.49 |
+------+----------+---------+

/*Для каждой отдельной книги необходимо вывести информацию о количестве проданных экземпляров и их стоимости за 
текущий и предыдущий год . Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию 
стоимости.*/
SELECT title, SUM(query_in.Количество) AS Количество, SUM(query_in.Сумма) AS Сумма
FROM
    (SELECT title, SUM(buy_archive.amount) AS Количество, SUM(buy_archive.price * buy_archive.amount) AS Сумма
    FROM 
        buy_archive
        INNER JOIN book USING(book_id)
    GROUP BY title
    UNION ALL
    SELECT title, SUM(buy_book.amount) AS Количество, SUM(book.price * buy_book.amount) AS Сумма
    FROM 
        book 
        INNER JOIN buy_book USING(book_id)
        INNER JOIN buy USING(buy_id) 
        INNER JOIN buy_step USING(buy_id)
        INNER JOIN step USING(step_id)
    WHERE  date_step_end IS NOT Null and name_step = "Оплата"
    GROUP BY title
    ) query_in
GROUP BY title
ORDER BY Сумма DESC;
+-----------------------+------------+---------+
| title                 | Количество | Сумма   |
+-----------------------+------------+---------+
| Братья Карамазовы     | 8          | 6247.20 |
| Мастер и Маргарита    | 6          | 4024.38 |
| Идиот                 | 5          | 2281.80 |
| Белая гвардия         | 3          | 1581.10 |
| Черный человек        | 2          | 1140.40 |
| Лирика                | 2          | 1037.98 |
| Игрок                 | 2          | 961.80  |
| Стихотворения и поэмы | 1          | 650.00  |
+-----------------------+------------+---------+

/*Придумайте один или несколько запросов на выборку. Моя задача.
Для каждого автора вывести информацию о количестве проданных книг и их стоимости за текущий и предыдущий год .
 Вычисляемые столбцы назвать Количество и Сумма. Информацию отсортировать по убыванию стоимости.*/
SELECT name_author, SUM(query_in.Количество) AS Количество, SUM(query_in.Сумма) AS Сумма
FROM
    (SELECT author.name_author, SUM(buy_archive.amount) AS Количество, SUM(buy_archive.price * buy_archive.amount) AS Сумма
    FROM 
        buy_archive
        INNER JOIN book USING(book_id)
        INNER JOIN author USING(author_id)
    GROUP BY name_author
    UNION ALL
    SELECT name_author, SUM(buy_book.amount) AS Количество, SUM(book.price * buy_book.amount) AS Сумма
    FROM 
        author
        INNER JOIN book USING(author_id)
        INNER JOIN buy_book USING(book_id)
        INNER JOIN buy USING(buy_id) 
        INNER JOIN buy_step USING(buy_id)
        INNER JOIN step USING(step_id)
    WHERE  date_step_end IS NOT Null and name_step = "Оплата"
    GROUP BY name_author
    ) query_in
GROUP BY name_author
ORDER BY Сумма DESC;
+------------------+------------+---------+
| name_author      | Количество | Сумма   |
+------------------+------------+---------+
| Достоевский Ф.М. | 15         | 9490.80 |
| Булгаков М.А.    | 9          | 5605.48 |
| Есенин С.А.      | 3          | 1790.40 |
| Пастернак Б.Л.   | 2          | 1037.98 |
+------------------+------------+---------+

