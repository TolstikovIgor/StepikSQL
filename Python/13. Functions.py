'''13.1 –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
–ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_box(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ 14 \times 1014√ó10 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:
**********
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
**********'''
def drow_box():
    for i in range(1):
        print('*' * 10)
    for i in range(12):
        print('*' + ' ' * 8 + '*')
    for i in range(1):
        print('*' * 10)

drow_box()

'''–ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∫–∞—Ç–µ—Ç–∞–º–∏, —Ä–∞–≤–Ω—ã–º–∏ 1010 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:

*
**
***
****
*****
******
*******
********
*********
**********'''
def draw_triangle():
    for i in range(10):
        print('*' * (i+1))

draw_triangle()


'''13.2 –§—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(fill, base), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
fill ‚Äì —Å–∏–º–≤–æ–ª –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å;
base ‚Äì –≤–µ–ª–∏—á–∏–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞;
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.'''
def draw_triangle(fill, base):
    for i in range(base // 2 + 1):
        for j in range(i + 1):
            print(fill, end='')
        print()
    for k in range(base // 2, 0, -1):
        for l in range(k):
            print(fill, end='')
        print()

fill = input()
base = int(input())

draw_triangle(fill, base)

'''–§–ò–û
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_fio(name, surname, patronymic), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
name ‚Äì –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞;
surname ‚Äì —Ñ–∞–º–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞;
patronymic ‚Äì –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞;
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–µ—á–∞—Ç—å –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞.'''
def print_fio(name, surname, patronymic):
    print(surname[0].upper(), name[0].upper(), patronymic[0].upper(), sep='')

name, surname, patronymic = input(), input(), input()

print_fio(name, surname, patronymic)

'''–°—É–º–º–∞ —Ü–∏—Ñ—Ä
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_digit_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ num –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–µ—á–∞—Ç—å —Å—É–º–º—É –µ–≥–æ —Ü–∏—Ñ—Ä.'''
def print_digit_sum(num):
    sm = 0
    while num != 0:
        sm = sm + num % 10
        num = num // 10
    print(sm)

num = int(input())
print_digit_sum(num)
    

'''13.4 –§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è. –ß–∞—Å—Ç—å 1
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_miles(km), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 
–≤ –º–∏–ª—è—Ö. –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –º–∏–ª–∏ = –∫–∏–ª–æ–º–µ—Ç—Ä—ã * 0.6214'''
def convert_to_miles(km):
    return (km * 0.6214)

num = int(input())
print(convert_to_miles(num))

'''–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_days(month), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.'''
from datetime import datetime
from calendar import monthrange
def get_days(month):
    current_year = datetime.now().year
    return (monthrange(current_year, month)[1])

num = int(input())
print(get_days(num))

'''–î–µ–ª–∏—Ç–µ–ª–∏ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.'''
def get_factors(num):
    return [i for i in range(1, num+1) if num % i == 0]

n = int(input())
print(get_factors(n))

'''–î–µ–ª–∏—Ç–µ–ª–∏ 2
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_of_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.'''
def get_factors(num):
    return [i for i in range(1, num + 1) if num % i == 0]

def number_of_factors(num):
    return len(get_factors(num))

n = int(input())
print(number_of_factors(n))

'''–ù–∞–π—Ç–∏ –≤—Å–µ—Ö
–ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ find('a') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ a –≤ —Å—Ç—Ä–æ–∫–µ. –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è
 —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞.
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º find_all(target, symbol), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É target –∏ —Å–∏–º–≤–æ–ª symbol –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.'''
def find_all(target, symbol):
    return [i for i in range(len(target)) if target[i] in symbol]

s = input()
char = input()

print(find_all(s, char))

'''Merge lists 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞, —Å–æ—Å—Ç–æ—è—â–∏—Ö
 –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.'''
def merge(list1, list2):
    return sorted(list1 + list2)

numbers1 = [int(c) for c in input().split()]
numbers2 = [int(c) for c in input().split()]

print(merge(numbers1, numbers2))

'''Merge lists 2
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è 
—Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ quick_merge(), 
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.'''
def quick_merge(ln):
    a = []
    for i in range(ln):
        num = [int(c) for c in input().split()]
        a += num
    return a.sort()
n = int(input())
print(*quick_merge(n))


'''13.5 –§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è. –ß–∞—Å—Ç—å 2
Is Valid Triangle?
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_triangle(side1, side2, side3), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ side1, side2, side3 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.'''
def is_valid_triangle(side1, side2, side3):
    arr = sorted([side1, side2, side3])
    return arr[0] + arr[1] > arr[2]

a, b, c = int(input()), int(input()), int(input())

print(is_valid_triangle(a, b, c))

'''Is a Number Prime? üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —á–∏—Å–ª–æ 
—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.'''
def is_prime(num):
    return len([i for i in range(1, num + 1) if num % i == 0]) == 2

n = int(input())

print(is_prime(n))

'''Next Prime üå∂Ô∏èüå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_next_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ 
–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–∞ num.'''
def is_prime(num):
    return len([i for i in range(1, num+1) if num % i == 0]) == 2

def get_next_prime(num):
    x = num + 1
    while is_prime(x) == False:
        x += 1
    return x
n = int(input())

print(get_next_prime(n))

'''Good password üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_password_good(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –µ—Å–ª–∏:
–µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 88 —Å–∏–º–≤–æ–ª–æ–≤; 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä); 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.'''
def is_password_good(password):
    upp = [i for i in password if i.isupper()]
    low = [i for i in password if i.islower()]
    dig = [i for i in password if i.isdigit()]
    return all([len(password) >= 8, upp, low, dig])
txt = input()

print(is_password_good(txt))      

'''–†–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞ word1 –∏ word2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
–∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ 1 —Å–∏–º–≤–æ–ª–µ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.'''
def is_one_away(word1, word2):
    if len(word1) != len(word2):
        return False
    count = 0
    for i in range(len(word1)):
        if word1[i] != word2[i]:
            count += 1
    if count == 1:
        return True
    else:
        return False

txt1 = input()
txt2 = input()

print(is_one_away(txt1, txt2))
    
'''–ü–∞–ª–∏–Ω–¥—Ä–æ–º üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É text –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π
—Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.'''
def is_palindrome(text):
    a = []
    for i in range(len(text)):
        a.extend(text[i])
    x1 = "".join(c for c in a if c.isalpha())
    x2 = x1[::-1]
    if x1 == x2:
        return True
    else:
        return False

txt = input().lower().split()

print(is_palindrome(txt))

'''BEEGEEK
BEEGEEK –Ω–∞–∫–æ–Ω–µ—Ü –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∞–Ω–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–æ–º–∞—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.

–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å BEEGEEK –±–∞–Ω–∫–∞ –∏–º–µ–µ—Ç –≤–∏–¥ a:b:c, –≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ—Å–∫–æ–ª—å–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BEEGEEK —Ñ–∞–Ω–∞—Ç–µ–µ—Ç
 –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–æ –æ–Ω —Ä–µ—à–∏–ª:
—á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
—á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
—á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º.
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_password(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
 –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º BEEGEEK –±–∞–Ω–∫–∞ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.'''
def is_valid_password(password):
    p = password.split(':')
    a = 0
    for i in range(2, int(p[1]) //2 + 1):
        if int(p[1]) % i == 0:
            a += 1
    return p[0] == p[0][::-1] and a <= 0 and int(p[2]) % 2 == 0 and len(p) == 3

psw = input()

print(is_valid_password(psw))

'''–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
 ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ False –≤ 
 –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.'''
def is_correct_bracket(text):
    while '()' in text:
        text = text.replace('()', '')
    return not text

txt = input()
print(is_correct_bracket(txt))

'''–ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
 –µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª.'''
def convert_to_python_case(text):
    t1 = text.lower()
    t2 = t1[0]
    for i in range(1, len(t1)):
        if text[i] == t1[i]:
            t2 = (t2 + t1[i])
        elif text[i] != t1[i]:
            t2 = (t2) + ("_") + (t1[i])
    return t2
txt = input()
print(convert_to_python_case(txt))


'''13.6 –§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è. –ß–∞—Å—Ç—å 3
–°–µ—Ä–µ–¥–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_middle_point(x1, y1, x2, y2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ü–æ–≤ –æ—Ç—Ä–µ–∑–∫–∞ (x_1; \, y_1)(x 
 ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ —è–≤–ª—è—é—â–µ–π—Å—è —Å–µ—Ä–µ–¥–∏–Ω–æ–π –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞.'''
def get_middle_point(x1, y1, x2, y2):
    return ((x1 + x2)/2), ((y1 + y2)/2)

x_1, y_1 = int(input()), int(input())
x_2, y_2 = int(input()), int(input())

x, y = get_middle_point(x_1, y_1, x_2, y_2)
print(x, y)

'''–ü–ª–æ—â–∞–¥—å –∏ –¥–ª–∏–Ω–∞
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_circle(radius), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: –¥–ª–∏–Ω—É 
–æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é.'''
def get_circle(radius):
    return (2 * 3.141592653589793 * radius), (3.141592653589793 * radius ** 2)

r = float(input())

length, square = get_circle(r)
print(length, square)

'''–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è üå∂Ô∏èüå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é solve(a, b, c), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ a, b, c ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ax^2+bx+c = 0ax 2 +bx+c=0 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ—Ä–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.'''
from math import sqrt
def solve(a, b, c):
    D = b**2 - 4*a*c
    l = [((-b + sqrt(D)) / (2 * a)), ((-b - sqrt(D)) / (2 * a))]
    return min(l), max(l)

a, b, c = int(input()), int(input()), int(input())

x1, x2 = solve(a, b, c)
print(x1, x2)


